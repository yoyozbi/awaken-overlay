generator client {
  provider        = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_URL")
}


model LoginAttemps {
  id        String @id @default(uuid())

  user_id   String
  user      AuthUser @relation(fields: [user_id], references: [id])


  ipAddress String
  userAgent String
  sucessful Boolean
  triedPassword String?

  when      DateTime @default(now())
}

// lucia Auth
model AuthUser {
  id           String @id @unique
  auth_session AuthSession[]
  auth_key     AuthKey[]


  LoginAttemps LoginAttemps[]
  username     String @unique
  isAdmin      Boolean @default(false)

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("auth_user")
}

model AuthSession {
  id             String @id @unique
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  auth_user      AuthUser  @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@map("auth_session")
}

model AuthKey {
  id      String  @id @unique
  hashed_password String?
  user_id         String
  primary_key     Boolean
  expires         BigInt?
  auth_user       AuthUser  @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@map("auth_key")
}

model Team {
  id           String        @id @default(uuid())
  name         String
  leftIcon     String        @default("")
  rightIcon    String        @default("")
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  team1Matches CurrentMatch? @relation("Team1")
  team2Matches CurrentMatch? @relation("Team2")
}

model CurrentMatch {
  id        String   @id @default(uuid())
  team1Id   String   @unique
  team2Id   String   @unique
  team1Score Int
  team2Score Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  team1     Team     @relation("Team1", fields: [team1Id], references: [id])
  team2     Team     @relation("Team2", fields: [team2Id], references: [id])
}
