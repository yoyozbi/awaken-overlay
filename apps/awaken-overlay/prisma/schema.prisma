generator client {
  provider        = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_URL")
}


model LoginAttemps {
  id        String @id @default(uuid())

  user_id   String
  user      AuthUser @relation(fields: [user_id], references: [id])


  ipAddress String
  userAgent String
  sucessful Boolean
  triedPassword String?

  when      DateTime @default(now())
}

// lucia Auth
model AuthUser {
  id           String @id @unique
  auth_session AuthSession[]
	hashedPassword String


  LoginAttemps LoginAttemps[]
  username     String @unique
  isAdmin      Boolean @default(false)

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

}

model AuthSession {
  id             String @id @unique
  userId        String
	expiresAt      DateTime
  authUser      AuthUser  @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@index([userId])
}


model Team {
  id           String        @id @default(uuid())
  name         String
  leftIcon     String        @default("")
  rightIcon    String        @default("")
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  team1Matches CurrentMatch? @relation("Team1")
  team2Matches CurrentMatch? @relation("Team2")
}

model CurrentMatch {
  id         String   @id @default(uuid())

  team1Id    String   @unique
  team2Id    String   @unique
  bestOfId   String   @unique

  team1Score Int
  team2Score Int

  team1      Team     @relation("Team1", fields: [team1Id], references: [id])
  team2      Team     @relation("Team2", fields: [team2Id], references: [id])

  bestOf     BestOf   @relation(references: [id], fields: [bestOfId])

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
 
}

model BestOf {
  id  String @id @default(uuid())
  name String @unique
  nbOfMatch Int @unique

  matches CurrentMatch?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
